runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
?shinydashboardPlus::box
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
shinyApp(
ui = dashboardPage(
dashboardHeader(disable = TRUE),
# _ Siderbar ----
dashboardSidebar(collapsed = TRUE),
# _ Body ----
dashboardBody(
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #23769a;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #23769a;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #23769a;
}
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #23769a;
}
.sidebar {
color: #23769a;
position: fixed;
width: 1px;
white-space: nowrap;
overflow: visible;
background-color: #23769a;
}
/* active selected tab in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
background-color: white;
}
/* other links in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu a{
background-color: white;
color: #000000;
}
/* other links in the sidebarmenu when hovered */
.skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
background-color: white;
}
/* toggle button when hovered  */
.skin-blue .main-header .navbar .sidebar-toggle:hover{
background-color: white;
}
/* body */
.content-wrapper, .right-side {
background-color: white;
}
'))),
# __ Header ----
fluidRow(
shinydashboardPlus::box(
width = 12,
#tags$script(HTML("$('.box').eq(0).css('border', '0px solid white');")),
tags$script(HTML('.box{-webkit-box-shadow: none; -moz-box-shadow: none;box-shadow: none;}'))),
#shinyjs::useShinyjs(),
#div(style="display: inline-block;vertical-align:top; width: 20px;",HTML("<br>")),
tags$img(src = "DEQ-logo-color-horizontal370x73.png"),
tags$div(span("Oregon CyAN Image of Cyanobacteria Abundance",
#style = "color: black; font-size: 50px; margin-left: 20px")),
shiny::runApp()
runApp()
load("data.RData")
df.map.date <- lookup.date %>%
dplyr::filter(Date %in% as.Date("2020-09-29")) %>%
dplyr::mutate(map_day = paste0("2020","273"))
library(dplyr)
df.map.date <- lookup.date %>%
dplyr::filter(Date %in% as.Date("2020-09-29")) %>%
dplyr::mutate(map_day = paste0("2020","273"))
map.tif.dir <- paste0("data/", df.map.date$Year.dta, "/")
file.name <- paste0(df.map.date$map_day,".tif")
rst <- raster::raster(paste0(map.tif.dir,file.name))
leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
leaflet::setView(lng = -121, lat = 44, zoom=7) %>%
leaflet.extras::addResetMapButton() %>%
leaflet::addRasterImage(rst, project = FALSE, colors=pal.map, opacity = 1)
library(leaflet)
leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
leaflet::setView(lng = -121, lat = 44, zoom=7) %>%
leaflet.extras::addResetMapButton() %>%
leaflet::addRasterImage(rst, project = FALSE, colors=pal.map, opacity = 1)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("htmltools")
install.packages("BH")
install.packages("Rcpp")
install.packages("jsonlite")
install.packages("httpuv")
install.packages("sass")
install.packages("waiter")
library(devtools)
devtools::install_github("RinteRface/shinydashboardPlus")
devtools::install_github("RinteRface/shinydashboardPlus", force = TRUE)
library(shinydashboardPlus)
shiny::runApp()
?dashboardPage()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("data.RData")
unique(dta$GNISNAME)
unique(lakes$GNIS_Name)
unique(lakes$GNIS_ID)
unique(dta$GNISIDNAME)
runApp()
shiny::runApp()
detach("package:sp", unload = TRUE)
detach("package:shinyWidgets", unload = TRUE)
detach("package:shinythemes", unload = TRUE)
detach("package:shinydashboardPlus", unload = TRUE)
detach("package:shinydashboard", unload = TRUE)
detach("package:shiny", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:DT", unload = TRUE)
detach("package:forcats", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:leaflet", unload = TRUE)
detach("package:leaflet.extras", unload = TRUE)
detach("package:lubridate", unload = TRUE)
detach("package:plotly", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:raster", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:scales", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
detach("package:base", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:stats", unload = TRUE)
remove.packages(shinydashboardPlus)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?add_trace
runApp()
runApp()
runApp()
runApp()
?pickerInput
load("data.RData")
colnames(lakes)
colnames(lakes)
unique(lakes$GNIS_Name
)
unique(lakes$GNISIDNAME)
sort(unique(lakes$GNISIDNAME))
shiny::runApp()
runApp()
runApp()
?add_lines
runApp()
shiny::runApp()
load("data.RData")
unique(sort(lakes$GNIS_Name))
unique(sort(lakes$GNISIDNAME))
runApp()
unique(sort(lakes$GNIS_Name))
unique(dta$GNISIDNAME)
runApp()
devtools::install_github('rstudio/rmarkdown')
install.packages("xfun")
install.packages("tinytex")
devtools::install_github('rstudio/rmarkdown')
library(rmarkdown)
load("data.RData")
colnames(dta)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
