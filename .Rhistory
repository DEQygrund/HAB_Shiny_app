y = ~`Cyanobacteria (cells/mL)`,
type = "bar",
name = "Mean") %>%
layout(barmode = "overlay")
# bar - overlay
plotly::plot_ly(data = df[which(df$`Summary Statistics`=="Maximum"),],
x = ~as.Date(Date),
y = ~`Cyanobacteria (cells/mL)`,
type = "bar",
name = "Maximum",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
add_trace(data = df[which(df$`Summary Statistics`=="Mean"),],
x = ~as.Date(Date),
y = ~`Cyanobacteria (cells/mL)`,
type = "bar",
name = "Mean",
marker = list(color = 'red',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(barmode = "overlay")
months = 1:12
# bar - overlay
plotly::plot_ly(data = df[which(df$`Summary Statistics`=="Maximum"),],
x = ~as.Date(Date),
y = ~`Cyanobacteria (cells/mL)`,
type = "bar",
name = "Maximum",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
add_trace(data = df[which(df$`Summary Statistics`=="Mean"),],
x = ~as.Date(Date),
load("data.RData")
df.missing <- #reactive({
missing.data %>%
dplyr::mutate(GNISIDNAME = "Upper Klamath Lake_01151685")
df <- #reactive({
dta %>%
rbind(df.missing) %>%
#dplyr::mutate(barwidth = ifelse(`Summary Statistics`=="Maximum",1,
#                                ifelse(`Summary Statistics`=="Mean",0.8, 0.5))) %>%
dplyr::filter(GNISIDNAME %in% c("Upper Klamath Lake_01151685")) %>%
dplyr::filter(`Summary Statistics` %in% c("Minimum","Maximum","Mean")) %>%
#dplyr::filter(Date >= input$date_plot[1],Date <= input$date_plot[2]) %>%
dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::arrange(Date)# %>%
library(tidyverse)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyEffects)
library(raster)
library(leaflet)
library(leaflet.extras)
library(leafem)
library(mapview)
library(plainview)
library(scales)
library(plotly)
library(DT)
library(lubridate)
library(tidyverse)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyEffects)
library(raster)
library(leaflet)
library(leaflet.extras)
library(leafem)
library(mapview)
library(plainview)
library(scales)
library(plotly)
library(DT)
library(lubridate)
df.missing <- #reactive({
missing.data %>%
dplyr::mutate(GNISIDNAME = "Upper Klamath Lake_01151685")
df <- #reactive({
dta %>%
rbind(df.missing) %>%
#dplyr::mutate(barwidth = ifelse(`Summary Statistics`=="Maximum",1,
#                                ifelse(`Summary Statistics`=="Mean",0.8, 0.5))) %>%
dplyr::filter(GNISIDNAME %in% c("Upper Klamath Lake_01151685")) %>%
dplyr::filter(`Summary Statistics` %in% c("Minimum","Maximum","Mean")) %>%
#dplyr::filter(Date >= input$date_plot[1],Date <= input$date_plot[2]) %>%
dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::arrange(Date)# %>%
# lines with breaks; need to use df.missing data
plotly::plot_ly(
data = df,
x = ~Date,
y = ~`Cyanobacteria (cells/mL)`,
split = ~`Summary Statistics`,
type = "scatter",
mode = "lines+markers",
huc6 <- rgdal::readOGR(dsn = "./data/WBD_HU6.shp",
layer = "WBD_HU6")
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
# (1) Map: shapefile ----
lakes.resolvable <- rgdal::readOGR(dsn = "./data/NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6.shp",
layer = "NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6")
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs="+init=epsg:4326")
huc6 <- rgdal::readOGR(dsn = "./data/WBD_HU6.shp",
layer = "WBD_HU6")
# (2) Plot and Table ----
dta1 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2020.xlsx",
sheet = "HAB_resolvablelakes_2016_2020")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2021.xlsx",
sheet = "HAB_resolvable_lake_data")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta3 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx",
sheet = "cyan_resolvable_lakes")
GNISNameID <- unique(sort(dta3$wi_DWSA))
dta <- rbind(dta1,dta2) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% GNISNameID, "Yes", "No"))
#dta_rolling_ave <- dta2 %>%
#  dplyr::arrange(GNISIDNAME,desc(Date)) %>%
#  dplyr::group_by(GNISIDNAME) %>%
#  dplyr::mutate(rollmean_7 = zoo::rollmean(MEAN_cellsml, k = 7, fill = NA, align = "left"),
#                rollmax_7 = zoo::rollmax(MAX_cellsml, k=7, fill =  NA, align = "left")) %>%
#  dplyr::ungroup() %>%
#  dplyr::filter(as.Date(Date) == as.Date(max(dta2$Date)))
#mean_top_10 <- dta_rolling_ave %>%
#  dplyr::arrange(desc(rollmean_7))
#max_top_10 <- dta_rolling_ave %>%
#  dplyr::arrange(desc(rollmax_7)) %>%
#  dplyr::mutate(rollmax_7 = format(round(rollmax_7,0), big.mark=",", scientific=FALSE)) %>%
#  dplyr::select(`Waterbody_GNISID` = GNISIDNAME,
#                `7-Day Max Moving Average` = rollmax_7)
# (3) Date Lookup Table ----
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (4) Map: raster ----
# Raster color
thevalues <-c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000)
paletteFunc <- grDevices::colorRampPalette(c('gray','yellow','orange','dark red'))
palette     <- paletteFunc(12)
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
# Legend labels
labels = c("Non-detect","6,311 - 13,000","13,000 - 25,000","25,000 - 50,000","50,000 - 100,000","100,000 - 200,000","200,000 - 400,000","400,000 - 800,000","800,000 - 1,000,000","1,000,000 - 3,000,000","3,000,000 - 6,000,000","> 6,000,000")
# ----
#rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
colnames(huc6)
colnames(huc6@data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
# (1) Map: shapefile ----
lakes.resolvable <- rgdal::readOGR(dsn = "./data/NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6.shp",
layer = "NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6")
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs="+init=epsg:4326")
huc6 <- rgdal::readOGR(dsn = "./data/WBD_HU6.shp",layer = "WBD_HU6")
pal.huc6 <- leaflet::colorFactor(palette = "Paired", domain = unique(sort(huc6@data$HU_6_NAME)))
# (2) Plot and Table ----
dta1 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2020.xlsx",
sheet = "HAB_resolvablelakes_2016_2020")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2021.xlsx",
sheet = "HAB_resolvable_lake_data")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta3 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx",
sheet = "cyan_resolvable_lakes")
GNISNameID <- unique(sort(dta3$wi_DWSA))
dta <- rbind(dta1,dta2) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% GNISNameID, "Yes", "No"))
#dta_rolling_ave <- dta2 %>%
#  dplyr::arrange(GNISIDNAME,desc(Date)) %>%
#  dplyr::group_by(GNISIDNAME) %>%
#  dplyr::mutate(rollmean_7 = zoo::rollmean(MEAN_cellsml, k = 7, fill = NA, align = "left"),
#                rollmax_7 = zoo::rollmax(MAX_cellsml, k=7, fill =  NA, align = "left")) %>%
#  dplyr::ungroup() %>%
#  dplyr::filter(as.Date(Date) == as.Date(max(dta2$Date)))
#mean_top_10 <- dta_rolling_ave %>%
#  dplyr::arrange(desc(rollmean_7))
#max_top_10 <- dta_rolling_ave %>%
#  dplyr::arrange(desc(rollmax_7)) %>%
#  dplyr::mutate(rollmax_7 = format(round(rollmax_7,0), big.mark=",", scientific=FALSE)) %>%
#  dplyr::select(`Waterbody_GNISID` = GNISIDNAME,
#                `7-Day Max Moving Average` = rollmax_7)
# (3) Date Lookup Table ----
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (4) Map: raster ----
# Raster color
thevalues <-c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000)
paletteFunc <- grDevices::colorRampPalette(c('gray','yellow','orange','dark red'))
palette     <- paletteFunc(12)
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
# Legend labels
labels = c("Non-detect","6,311 - 13,000","13,000 - 25,000","25,000 - 50,000","50,000 - 100,000","100,000 - 200,000","200,000 - 400,000","400,000 - 800,000","800,000 - 1,000,000","1,000,000 - 3,000,000","3,000,000 - 6,000,000","> 6,000,000")
# ----
#rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
shiny::runApp()
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
# (1) Map: shapefile ----
lakes.resolvable <- rgdal::readOGR(dsn = "./data/NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6.shp",
layer = "NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6")
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs="+init=epsg:4326")
huc6 <- rgdal::readOGR(dsn = "./data/WBD_HU6.shp",layer = "WBD_HU6")
pal.huc6 <- leaflet::colorFactor(palette = "Paired", domain = unique(sort(huc6@data$HU_6_NAME)))
# (2) Plot and Table ----
dta1 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2020.xlsx",
sheet = "HAB_resolvablelakes_2016_2020")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2021.xlsx",
sheet = "HAB_resolvable_lake_data")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta3 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx",
sheet = "cyan_resolvable_lakes")
GNISNameID <- unique(sort(dta3$wi_DWSA))
dta <- rbind(dta1,dta2) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% GNISNameID, "Yes", "No"))
# (3) Date Lookup Table ----
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (4) Map: raster ----
# Raster color
thevalues <-c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000)
paletteFunc <- grDevices::colorRampPalette(c('gray','yellow','orange','dark red'))
palette     <- paletteFunc(12)
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
# Legend labels
labels = c("Non-detect","6,311 - 13,000","13,000 - 25,000","25,000 - 50,000","50,000 - 100,000","100,000 - 200,000","200,000 - 400,000","400,000 - 800,000","800,000 - 1,000,000","1,000,000 - 3,000,000","3,000,000 - 6,000,000","> 6,000,000")
# ----
#rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
runApp()
source('//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R')
shiny::runApp()
shiny::runApp()
