runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
?shinydashboardPlus::box
runApp('test_dashboard_5.R')
runApp('test_dashboard_5.R')
shinyApp(
ui = dashboardPage(
dashboardHeader(disable = TRUE),
# _ Siderbar ----
dashboardSidebar(collapsed = TRUE),
# _ Body ----
dashboardBody(
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #23769a;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #23769a;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #23769a;
}
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #23769a;
}
.sidebar {
color: #23769a;
position: fixed;
width: 1px;
white-space: nowrap;
overflow: visible;
background-color: #23769a;
}
/* active selected tab in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
background-color: white;
}
/* other links in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu a{
background-color: white;
color: #000000;
}
/* other links in the sidebarmenu when hovered */
.skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
background-color: white;
}
/* toggle button when hovered  */
.skin-blue .main-header .navbar .sidebar-toggle:hover{
background-color: white;
}
/* body */
.content-wrapper, .right-side {
background-color: white;
}
'))),
# __ Header ----
fluidRow(
shinydashboardPlus::box(
width = 12,
#tags$script(HTML("$('.box').eq(0).css('border', '0px solid white');")),
tags$script(HTML('.box{-webkit-box-shadow: none; -moz-box-shadow: none;box-shadow: none;}'))),
#shinyjs::useShinyjs(),
#div(style="display: inline-block;vertical-align:top; width: 20px;",HTML("<br>")),
tags$img(src = "DEQ-logo-color-horizontal370x73.png"),
tags$div(span("Oregon CyAN Image of Cyanobacteria Abundance",
#style = "color: black; font-size: 50px; margin-left: 20px")),
shiny::runApp()
runApp()
load("data.RData")
df.map.date <- lookup.date %>%
dplyr::filter(Date %in% as.Date("2020-09-29")) %>%
dplyr::mutate(map_day = paste0("2020","273"))
library(dplyr)
df.map.date <- lookup.date %>%
dplyr::filter(Date %in% as.Date("2020-09-29")) %>%
dplyr::mutate(map_day = paste0("2020","273"))
map.tif.dir <- paste0("data/", df.map.date$Year.dta, "/")
file.name <- paste0(df.map.date$map_day,".tif")
rst <- raster::raster(paste0(map.tif.dir,file.name))
leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
leaflet::setView(lng = -121, lat = 44, zoom=7) %>%
leaflet.extras::addResetMapButton() %>%
leaflet::addRasterImage(rst, project = FALSE, colors=pal.map, opacity = 1)
library(leaflet)
leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
leaflet::setView(lng = -121, lat = 44, zoom=7) %>%
leaflet.extras::addResetMapButton() %>%
leaflet::addRasterImage(rst, project = FALSE, colors=pal.map, opacity = 1)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("htmltools")
install.packages("BH")
install.packages("Rcpp")
install.packages("jsonlite")
install.packages("httpuv")
install.packages("sass")
install.packages("waiter")
library(devtools)
devtools::install_github("RinteRface/shinydashboardPlus")
devtools::install_github("RinteRface/shinydashboardPlus", force = TRUE)
library(shinydashboardPlus)
shiny::runApp()
?dashboardPage()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("rasterVis")
library(rasterVis)
grDevices::colorRampPalette
?rastertheme
?rasterTheme
# (4) Map: raster ----
# Raster color
#thevalues <-c(0,6310,18000,43000,61500,84000,100000,130000,1000000)
thevalues <-c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000)
non_detect <- "#B3B3B3" # gray color
detect <- RColorBrewer::brewer.pal(9,"YlOrRd")
thecolor <- rasterVis::rasterTheme(region = c(non_detect,detect))
pal.map <- leaflet::colorBin(palette = grDevices::colorRampPalette(thecolor)(12),
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
paletteFunc <- grDevices::colorRampPalette(c('gray','red','blue'))
palette     <- paletteFunc(12)
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
# setwd("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app")
# (1) Plot and Table ----
dta1 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2020.xlsx",
sheet = "HAB_resolvablelakes_2016_2020")
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2021.xlsx",
sheet = "HAB_resolvable_toMar182021")
dta3 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx",
sheet = "cyan_resolvable_lakes")
GNISNameID <- unique(sort(dta3$wi_DWSA))
dta <- rbind(dta1,dta2) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% GNISNameID, "Yes", "No")) %>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") # located in the WA state
# (2) Date Lookup Table ----
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (3) Map: shapefile ----
lakes.resolvable <- rgdal::readOGR(dsn = "./data/NHDwaterbody_resolvable_lakes_dissolved_oregon_clean.shp",
layer = "NHDwaterbody_resolvable_lakes_dissolved_oregon_clean")
#lakes.oregon <- rgdal::readOGR(dsn = "./data/NHDwaterbody_oregon_lakes.shp",
#                               layer = "NHDwaterbody_oregon_lakes")
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs="+init=epsg:4326")
#ggplot() +
#  geom_sf(data=huc8) +
#  geom_sf(data=state.boundary)
# (4) Map: raster ----
# Raster color
#thevalues <-c(0,6310,18000,43000,61500,84000,100000,130000,1000000)
thevalues <-c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000)
#non_detect <- "#B3B3B3" # gray color
#detect <- RColorBrewer::brewer.pal(9,"YlOrRd")
#thecolor <- rasterVis::rasterTheme(region = c(non_detect,detect))
paletteFunc <- grDevices::colorRampPalette(c('gray','red','blue'))
palette     <- paletteFunc(12)
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
# Legend labels
#labels = c("Non-detect","6,311 - 18,000","18,000 - 43,000","43,000 - 61,500","61,500 - 84,000","84,000 - 100,000","100,000 - 130,000","130,000 - 1,000,000")
labels = c("Non-detect","6,311 - 13,000","13,000 - 25,000","25,000 - 50,000","50,000 - 100,000","100,000 - 200,000","200,000 - 400,000","400,000 - 800,000","800,000 - 1,000,000","1,000,000 - 3,000,000","3,000,000 - 6,000,000","> 6,000,000")
# ----
rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
shiny::runApp()
paletteFunc <- grDevices::colorRampPalette(c('gray','yellow','red'))
palette     <- paletteFunc(12)
# Legend labels
#labels = c("Non-detect","6,311 - 18,000","18,000 - 43,000","43,000 - 61,500","61,500 - 84,000","84,000 - 100,000","100,000 - 130,000","130,000 - 1,000,000")
labels = c("Non-detect","6,311 - 13,000","13,000 - 25,000","25,000 - 50,000","50,000 - 100,000","100,000 - 200,000","200,000 - 400,000","400,000 - 800,000","800,000 - 1,000,000","1,000,000 - 3,000,000","3,000,000 - 6,000,000","> 6,000,000")
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
# ----
rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
runApp()
paletteFunc <- grDevices::colorRampPalette(c('gray','yellow','orange','dark red'))
palette     <- paletteFunc(12)
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
domain = c(0,6310,13000,25000,50000,100000,200000,400000,800000,1000000,3000000,6000000,7000000),
na.color = "transparent")
# Legend labels
#labels = c("Non-detect","6,311 - 18,000","18,000 - 43,000","43,000 - 61,500","61,500 - 84,000","84,000 - 100,000","100,000 - 130,000","130,000 - 1,000,000")
labels = c("Non-detect","6,311 - 13,000","13,000 - 25,000","25,000 - 50,000","50,000 - 100,000","100,000 - 200,000","200,000 - 400,000","400,000 - 800,000","800,000 - 1,000,000","1,000,000 - 3,000,000","3,000,000 - 6,000,000","> 6,000,000")
save.image(file = "data.RData")
runApp()
runApp()
